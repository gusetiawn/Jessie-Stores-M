// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "git-rbi.jatismobile.com/jatis_chatcommerce/mi-storesapi/internal/model"
	repository "git-rbi.jatismobile.com/jatis_chatcommerce/mi-storesapi/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckUserIsStoreAdmin mocks base method.
func (m *MockRepository) CheckUserIsStoreAdmin(ctx context.Context, userID, storeID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIsStoreAdmin", ctx, userID, storeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserIsStoreAdmin indicates an expected call of CheckUserIsStoreAdmin.
func (mr *MockRepositoryMockRecorder) CheckUserIsStoreAdmin(ctx, userID, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIsStoreAdmin", reflect.TypeOf((*MockRepository)(nil).CheckUserIsStoreAdmin), ctx, userID, storeID)
}

// GetAddress mocks base method.
func (m *MockRepository) GetAddress(ctx context.Context, addressID int64) (*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", ctx, addressID)
	ret0, _ := ret[0].(*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockRepositoryMockRecorder) GetAddress(ctx, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockRepository)(nil).GetAddress), ctx, addressID)
}

// GetNearestStores mocks base method.
func (m *MockRepository) GetNearestStores(ctx context.Context, input repository.GetNearestStoresInput) ([]model.StoreWithCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestStores", ctx, input)
	ret0, _ := ret[0].([]model.StoreWithCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestStores indicates an expected call of GetNearestStores.
func (mr *MockRepositoryMockRecorder) GetNearestStores(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestStores", reflect.TypeOf((*MockRepository)(nil).GetNearestStores), ctx, input)
}

// GetStoreByRef mocks base method.
func (m *MockRepository) GetStoreByRef(ctx context.Context, typeDeeplink, referenceID string) (*model.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreByRef", ctx, typeDeeplink, referenceID)
	ret0, _ := ret[0].(*model.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreByRef indicates an expected call of GetStoreByRef.
func (mr *MockRepositoryMockRecorder) GetStoreByRef(ctx, typeDeeplink, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreByRef", reflect.TypeOf((*MockRepository)(nil).GetStoreByRef), ctx, typeDeeplink, referenceID)
}

// GetStoreOpenConfig mocks base method.
func (m *MockRepository) GetStoreOpenConfig(ctx context.Context, storeIDs []int64) (model.StoreConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreOpenConfig", ctx, storeIDs)
	ret0, _ := ret[0].(model.StoreConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreOpenConfig indicates an expected call of GetStoreOpenConfig.
func (mr *MockRepositoryMockRecorder) GetStoreOpenConfig(ctx, storeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreOpenConfig", reflect.TypeOf((*MockRepository)(nil).GetStoreOpenConfig), ctx, storeIDs)
}

// GetUserLastToken mocks base method.
func (m *MockRepository) GetUserLastToken(ctx context.Context, token string) (*model.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLastToken", ctx, token)
	ret0, _ := ret[0].(*model.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLastToken indicates an expected call of GetUserLastToken.
func (mr *MockRepositoryMockRecorder) GetUserLastToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLastToken", reflect.TypeOf((*MockRepository)(nil).GetUserLastToken), ctx, token)
}

// UpdateTokenStore mocks base method.
func (m *MockRepository) UpdateTokenStore(ctx context.Context, tokenID, storeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenStore", ctx, tokenID, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenStore indicates an expected call of UpdateTokenStore.
func (mr *MockRepositoryMockRecorder) UpdateTokenStore(ctx, tokenID, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenStore", reflect.TypeOf((*MockRepository)(nil).UpdateTokenStore), ctx, tokenID, storeID)
}
